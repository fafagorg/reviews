openapi: 3.0.0
info:
  version: 1.0.0
  title: Review API
  description: >-
    This is an OpenAPI Specification for Fafago Reviews API 
  contact:
    name: Review API for Fafago Service
    email: fafago@gmail.com
    url: 'https://github.com/fafagorg/reviews'
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
paths:
  /api/v1/questions:
    x-swagger-router-controller: questionController
    get:
      description: Returns all questions
      operationId: getQuestions
      tags:
        - Questions
      responses:
        '200':
          description: Question List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/question'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      description: Creates a new question
      operationId: addQuestion
      tags:
        - Questions
      parameters:
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '201':
          description: Question created
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      requestBody:
        x-name: question
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question'
        description: Question to be created
        required: true
  '/api/v1/questions/{id}':
    x-swagger-router-controller: questionController
    get:
      description: Returns a question by id
      operationId: findQuestionByid
      tags:
        - Questions
      parameters:
        - name: id
          in: path
          description: id of question to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Question returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      description: Deletes a single question based on the id
      operationId: deleteQuestion
      tags:
        - Questions
      parameters:
        - name: id
          in: path
          description: ID of question to delete
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Question deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      description: Update a question based on its id
      operationId: updateQuestion
      tags:
        - Questions
      parameters:
        - name: id
          in: path
          description: ID of question to put
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Question updated
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      requestBody:
        x-name: question
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question'
        description: Question to be updated
        required: true
  '/api/v1/questions/product/{productId}':
    x-swagger-router-controller: questionController
    get:
      description: Returns all the questions of the given product id
      operationId: findQuestionsByProductId
      tags:
        - Questions
      parameters:
        - name: productId
          in: path
          description: id of the questioned product
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Questions returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/question'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      description: Deletes all the questions of the given product id
      operationId: deleteQuestionsByProductId
      tags:
        - Questions
      parameters:
        - name: productId
          in: path
          description: ID of the questioned product
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Questions deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/api/v1/question/{id}/replies':
    x-swagger-router-controller: questionController
    get:
      description: Returns all the replies of the question with the given id
      operationId: findQuestionRepliesById
      tags:
        - Questions
      parameters:
        - name: id
          in: path
          description: id of question to fetch replies
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Replies returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/replyResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      description: Creates a new reply for the given question
      operationId: addReplyToQuestion
      tags:
        - Questions
      parameters:
        - name: id
          in: path
          description: id of question to add the reply
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '201':
          description: Reply added
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      requestBody:
        x-name: reply
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reply'
        description: Reply to be added
        required: true
  '/api/v1/question/{questionId}/reply/{replyId}':
    x-swagger-router-controller: questionController
    get:
      description: Returns the reply with the given id in the given question
      operationId: findQuestionSingleReply
      tags:
        - Questions
      parameters:
        - name: questionId
          in: path
          description: id of the question
          required: true
          schema:
            type: string
        - name: replyId
          in: path
          description: id of the reply
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reply returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/replyResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      description: Deletes the given reply from the given question
      operationId: deleteReplyFromQuestion
      tags:
        - Questions
      parameters:
        - name: questionId
          in: path
          description: Id of the question
          required: true
          schema:
            type: string
        - name: replyId
          in: path
          description: Id of the reply
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Reply deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      description: Updates the reply with the given id from the given question
      operationId: updateReplyFromQuestion
      tags:
        - Questions
      parameters:
        - name: questionId
          in: path
          description: Id of the question
          required: true
          schema:
            type: string
        - name: replyId
          in: path
          description: Id of the reply
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Reply updated
        '404':
          description: Reply not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      requestBody:
        x-name: reply
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reply'
        description: Reply to be updated
        required: true
  /api/v1/reviews:
    x-swagger-router-controller: reviewController
    get:
      description: Returns all reviews
      operationId: getReviews
      tags:
        - Reviews
      responses:
        '200':
          description: Review List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reviewResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      description: Creates a new review
      operationId: addReview
      tags:
        - Reviews
      parameters:
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '201':
          description: Review created
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      requestBody:
        x-name: review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/review'
        description: Review to be created
        required: true
  '/api/v1/reviews/{id}':
    x-swagger-router-controller: reviewController
    get:
      description: Returns a review by id
      operationId: findReviewByid
      tags:
        - Reviews
      parameters:
        - name: id
          in: path
          description: id of review to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Review returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reviewResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      description: deletes a single review based on the id
      operationId: deleteReview
      tags:
        - Reviews
      parameters:
        - name: id
          in: path
          description: ID of review to delete
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Review deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      description: Update a review based on its id
      operationId: updateReview
      tags:
        - Reviews
      parameters:
        - name: id
          in: path
          description: ID of review to put
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Review updated
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      requestBody:
        x-name: review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/review'
        description: Review to be updated
        required: true
  '/api/v1/reviews/client/{clientId}':
    x-swagger-router-controller: reviewController
    get:
      description: Returns all the reviews of the given client id
      operationId: findReviewsByClientId
      tags:
        - Reviews
      parameters:
        - name: clientId
          in: path
          description: id of the reviewed client
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reviews returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reviewResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      description: Deletes all the reviews of the given reviewedClient id
      operationId: deleteReviewsByClientId
      tags:
        - Reviews
      parameters:
        - name: clientId
          in: path
          description: ID of the reviewed client
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Reviews deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/api/v1/reviews/author/{clientId}':
    x-swagger-router-controller: reviewController
    get:
      description: Returns all the reviews of the given reviewerClient id
      operationId: findReviewsByAuthorId
      tags:
        - Reviews
      parameters:
        - name: clientId
          in: path
          description: id of the reviewed client
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reviews returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reviewResponse'
        default:
          description: Unexpected error
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      description: Deletes all the reviews of the given reviewerClient id
      operationId: deleteReviewsByAuthorId
      tags:
        - Reviews
      parameters:
        - name: clientId
          in: path
          description: ID of the reviewed client
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Reviews deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/api/v1/reviews/product/{productId}':
    x-swagger-router-controller: reviewController
    get:
      description: Returns all the reviews of the given product id
      operationId: findReviewsByProductId
      tags:
        - Reviews
      parameters:
        - name: productId
          in: path
          description: id of the reviewed product
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reviews returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reviewResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      description: Deletes all the reviews of the given product id
      operationId: deleteReviewsByProductId
      tags:
        - Reviews
      parameters:
        - name: productId
          in: path
          description: ID of the reviewed product
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Reviews deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  '/api/v1/review/{id}/comments':
    x-swagger-router-controller: reviewController
    get:
      description: Returns all the comments of the review with the given id
      operationId: findReviewCommentsById
      tags:
        - Reviews
      parameters:
        - name: id
          in: path
          description: id of review to fetch comments
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comments returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/commentResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      description: Creates a new comment for the given review
      operationId: addCommentToReview
      tags:
        - Reviews
      parameters:
        - name: id
          in: path
          description: id of review to add the comment
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '201':
          description: Comment added
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      requestBody:
        x-name: comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment'
        description: Comment to be added
        required: true
  '/api/v1/review/{reviewId}/comment/{commentId}':
    x-swagger-router-controller: reviewController
    get:
      description: Returns the comment with the given id in the given review
      operationId: findReviewSingleComment
      tags:
        - Reviews
      parameters:
        - name: reviewId
          in: path
          description: id of the review
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          description: id of the comment
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      description: Deletes the given comment from the given review
      operationId: deleteCommentFromReview
      tags:
        - Reviews
      parameters:
        - name: reviewId
          in: path
          description: Id of the review
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          description: Id of the comment
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Comment deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      description: Updates the comment with the given id from the given review
      operationId: updateCommentFromReview
      tags:
        - Reviews
      parameters:
        - name: reviewId
          in: path
          description: Id of the review
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          description: Id of the comment
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Token needed for authentication
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Comment updated
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      requestBody:
        x-name: comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment'
        description: Comment to be updated
        required: true
components:
  schemas:
    errorModel:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    review:
      type: object
      properties:
        reviewedClientId:
          type: string
          minLength: 1
        reviewedProductId:
          type: string
          minLength: 1
        reviewerClientId:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        score:
          type: number
        description:
          type: string
          minLength: 1
        images: {}
        comments:
          type: array
          uniqueItems: false
          minItems: 0
          items:
            required:
              - clientId
            properties:
              clientId:
                type: string
                minLength: 1
              body:
                type: string
                minLength: 1
              date:
                type: string
                minLength: 1
      required:
        - reviewedClientId
        - reviewedProductId
        - reviewerClientId
        - title
        - score
        - description
    question:
      type: object
      properties:
        id:
          type: string
          minLength: 1
        productId:
          type: string
          minLength: 1
        clientId:
          type: string
          minLength: 1
        questionText:
          type: string
          minLength: 1
        dateCreated:
          type: string
          minLength: 1
        replies:
          type: array
          uniqueItems: true
          minItems: 0
          items:
            required:
              - clientId
            properties:
              clientId:
                type: string
                minLength: 1
              body:
                type: string
                minLength: 1
              date:
                type: string
                minLength: 1
      required:
        - questionText
    reviewResponse:
      type: object
      properties:
        id:
          type: string
          minLength: 1
        reviewedClientId:
          type: string
          minLength: 1
        reviewedProductId:
          type: string
          minLength: 1
        reviewerClientId:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        score:
          type: number
        description:
          type: string
          minLength: 1
        dateCreated:
          type: string
          minLength: 1
        images: {}
        comments:
          type: array
          uniqueItems: false
          minItems: 0
          items:
            required:
              - clientId
            properties:
              id:
                type: string
                minLength: 1
              clientId:
                type: string
                minLength: 1
              body:
                type: string
                minLength: 1
              date:
                type: string
                minLength: 1
      required:
        - id
        - dateCreated
        - reviewedClientId
        - reviewedProductId
        - reviewerClientId
        - title
        - score
        - description
        - comments
    comment:
      type: object
      properties:
        clientId:
          type: string
          minLength: 1
        body:
          type: string
          minLength: 1
      required:
        - clientId
        - body
    reply:
      type: object
      properties:
        clientId:
          type: string
          minLength: 1
        body:
          type: string
          minLength: 1
      required:
        - clientId
        - body
    commentResponse:
      type: object
      properties:
        id:
          type: string
          minLength: 1
        clientId:
          type: string
          minLength: 1
        body:
          type: string
          minLength: 1
        date:
          type: string
          minLength: 1
      required:
        - id
        - clientId
        - body
        - date
